namespace homeworld {
    public class EntityManager
    {
        int lowestUnAssignedEntityID = 1;
        LinkedList<int> allEntities;
        
        // Dictionary of (ComponentType, Dictionary)
        // ComponentType is the type class: XY, T is a generic object that implements the interface
        // Dictionary contains (UUID, the Component itself)
        Dictionary<Type, Dictionary<int, IComponent>> componentStores;

        public EntityManager()
        {
            allEntities = new LinkedList<int>();
            componentStores = new Dictionary<Type, Dictionary<int, IComponent>>();
        }

        public T getComponent<T>(int entity, T componentType) where T : IComponent
        {
            Dictionary<int, IComponent> store = componentStores.TryGetValue(componentType);

            if (store == null)
            {
                throw new NullReferenceException($"no entites of component with class {componentType}");
            }

            T result = componentType.cast(store.get(entity));
            
            if (result == null)
            {
                throw new NullReferenceException($"{entity} does not possess Component of class {componentType}");
            }

            return result;
        }

        public LinkedList<IComponent> getAllComponentsOfType(Type componentType)
        {
            Dictionary<int, IComponent> store = componentStores.get(componentType);

            if (store == null)
            {
                return new LinkedList<IComponent>();
            }
            else
            {
                LinkedList<IComponent> result = new LinkedList<IComponent>(store.Values);
                return result;
            }
        }

        public IComponent List<int> getAllEntitiesPossessingComponent(T componentType)
        {
            Dictionary<int, IComponent> store = componentStores.get(componentType);

            if (store == null)
            {
                return new List<int>();
            }
            else
            {
                return store.Keys;
            }
        }

        public void addComponent(int entity, T component) where T : IComponent
        {
            Dictionary<int, IComponent> store = componentStores.get(component.getClass());

            if (store == null)
            {
                store = new Dictionary<int, IComponent>();
                componentStores.put(component.getClass(), store);
            }

            ((Dictionary<int, IComponent>)store).put(entity, component);
        }

        public int CreateEntity()
        {
            int newID = generateNewEntityID();

            if (new ID < 1)
            {
                // fatal error
                return 0;
            }
            else
            {
                allEntities.AddLast(newID);
                return newID;
            }
        }

        public void KillEntity(int entity)
        {
            // synchronized( this ) // prevent it generating two entities with same ID at once
            for (Dictionary<int, IComponent> store : componentStores.values())
            {
                store.remove(entity);
            }
        }

        public int generateNewEntityID()
        {
            // synchronized (this)
            if (lowestUnassignedEntityID < Integer.MAX_VALUE)
            {
                return lowestUnassignedEntityID++;
            }
            else
            {
                for (int i = 1; i < Integer.MAX_VALUE; i ++)
                {
                    if (!allEntities.contains(i))
                    return i;
                }

                throw new Error("Too many entities!");
            }
        }
    }
}